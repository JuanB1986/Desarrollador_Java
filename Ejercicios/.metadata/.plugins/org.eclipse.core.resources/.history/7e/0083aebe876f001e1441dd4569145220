package com.Ejercicios_Clase7;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;

import org.junit.Before;
import org.junit.Test;

import com.Ejercicios_Clase7.Excepciones.NegativePriceException;
import com.Ejercicios_Clase7.Excepciones.NullPriceException;

public class CarritoTest {
	private static int count=1;
	
	@Before
	public void PruebaBefore() {
		
		System.out.println("**** Pre ejecucion - Test Nro: "+count+" ****");
		++count;
	}
	
	
	/*************************************************************************
	 TEST 1: Cálculo teorico del precio total del carrito y comparado con el 
	 metodo del carrito getPrecioTotal(), que obtiene el precio total con dcto.
	**************************************************************************/	
	@Test
	public void PruebaMetodoGetPrecioTotal() throws NullPriceException, NegativePriceException {
		
		
		//Objetos productos
		Producto objProductos[]=new Producto[20]; 
		itemCarrito objItem[]=new itemCarrito[10];
				
		//Objetos Compras
		Carrito carrito1=new Carrito();

		//Objetos Descuentos
		DescuentoPorcentajeConTope objDecuentoConTope = new DescuentoPorcentajeConTope(7.1f);
		
		//Carga objeto productos.
		objProductos[0]=new Producto("Manzana", 150.2f, 0.12f);
		objProductos[1]=new Producto("Peras", 102f, 0.1f);
		objProductos[2]=new Producto("Bananas", 110f, 0.15f);		
		objProductos[3]=new Producto("Pasta dental", 239.5f, 0.05f);
		objProductos[4]=new Producto("Cepillo de dientes", 187.0f, 0.03f);		
		objProductos[5]=new Producto("Cerveza Importada Hoegaarden", 900f, 0.5f);
		objProductos[6]=new Producto("Cerveza Importada Erdinger", 850.0f, 0.5f);
		objProductos[7]=new Producto("Cerveza Importada Grolsch", 3200.0f, 1.0f);		
		
		
		//Objetos items carrito
		objItem[0] = new itemCarrito (objProductos[0],10);
		objItem[1] = new itemCarrito (objProductos[1],3);
		objItem[2] = new itemCarrito (objProductos[2],5);
			
		//Objetos carrito
		carrito1.add(objItem[0]);
		carrito1.add(objItem[1]);
		carrito1.add(objItem[2]);

		
		//Calculos 
		double precioEsperado=carrito1.precioTotal(objDecuentoConTope);
		
		double precioCalculado= ;
		
		precioCalculado -= precioCalculado*objDecuentoConTope.getDescuento()/100.0f;  //Calcula descuento
		
      	assertEquals(precioCalculado,precioEsperado,0.01f);
      	
  	
	}
	
	
	/*************************************************************************
	 TEST 2: Cálculo del peso total del carrito, comparado con el valor teorico.
	**************************************************************************/	
	@Test
	public void PruebaMetodoGetPesoTotal() throws NullPriceException, NegativePriceException{
		
		
		//Objetos productos
		Producto objProductos[]=new Producto[20]; 
		itemCarrito objItem[]=new itemCarrito[10];
				
		//Objetos Compras
		Carrito carrito1=new Carrito();
		Carrito carrito2=new Carrito();
		Carrito carrito3=new Carrito();
		Carrito carrito4=new Carrito();
		Carrito carrito5=new Carrito();

		//Objetos Descuentos
		DescuentoFijo objDescuentoFijo = new DescuentoFijo();
		DescuentoPorcentaje objDescuentoPorcentaje = new DescuentoPorcentaje(6.3f);	
		DescuentoPorcentajeConTope objDecuentoConTope = new DescuentoPorcentajeConTope(7.1f);
		
		//Carga objeto productos.
		objProductos[0]=new Producto("Manzana", 150.2f, 0.12f);
		objProductos[1]=new Producto("Peras", 102f, 0.1f);
		objProductos[2]=new Producto("Bananas", 110f, 0.15f);		
		objProductos[3]=new Producto("Pasta dental", 239.5f, 0.05f);
		objProductos[4]=new Producto("Cepillo de dientes", 187.0f, 0.03f);		
		objProductos[5]=new Producto("Cerveza Importada Hoegaarden", 900f, 0.5f);
		objProductos[6]=new Producto("Cerveza Importada Erdinger", 850.0f, 0.5f);
		objProductos[7]=new Producto("Cerveza Importada Grolsch", 3200.0f, 1.0f);		
		
		//Productos que lanzan excepciones.
		objProductos[8]=new Producto("Caramelos Mediahora",0.0f,0.003f);
		objProductos[9]=new Producto("Papas",-520.5f,2.0f);
		
		
		//Objetos items carrito
		objItem[0] = new itemCarrito (objProductos[0],10);
		objItem[1] = new itemCarrito (objProductos[1],3);
		objItem[2] = new itemCarrito (objProductos[2],5);
		objItem[3] = new itemCarrito (objProductos[3],4);
		objItem[4] = new itemCarrito (objProductos[4],1);
		objItem[5] = new itemCarrito (objProductos[5],2);
		objItem[6] = new itemCarrito (objProductos[6],4);
		objItem[7] = new itemCarrito (objProductos[7],7);
		
		//Objetos que arrojan excepciones
		objItem[8] = new itemCarrito (objProductos[8],2);
		objItem[9] = new itemCarrito (objProductos[9],2);
		
		
		//Objetos carrito
		carrito1.add(objItem[0]);
		carrito1.add(objItem[1]);
		carrito1.add(objItem[2]);
		
		carrito2.add(objItem[6]);
		carrito2.add(objItem[7]);
		
		carrito3.add("./compra.dat");
		
		
		//Objetos que arrojan excepciones
		carrito4.add(objItem[8]);
		carrito5.add(objItem[9]);
		
		
		
		//Imprime tickets.
		System.out.println("Precio carrito1: "+carrito1.precioTotal());
		System.out.println("Precio carrito2: "+carrito2.precioTotal());
		System.out.println("Precio carrito3: "+carrito3.precioTotal());
		
		double pesoEsperado = compra2.getPesoTotal();
		double pesoCalculado = 0.15f*2 + 4*0.1f + 5*0.12f;	

      	
       	assertEquals(pesoCalculado,pesoEsperado,0.0f);      	
	}
	
	
	/*************************************************************************
	 TEST 3: DescuentoPorcentajeConTope
	**************************************************************************/	
	@Test
	public void PruebaMetodoDescuentoPorcentajeConTope() throws NullPriceException, NegativePriceException{
		
		
		//Objetos productos
		Producto objProductos[]=new Producto[20]; 
		itemCarrito objItem[]=new itemCarrito[10];
				
		//Objetos Compras
		Carrito carrito1=new Carrito();
		Carrito carrito2=new Carrito();
		Carrito carrito3=new Carrito();
		Carrito carrito4=new Carrito();
		Carrito carrito5=new Carrito();

		//Objetos Descuentos
		DescuentoFijo objDescuentoFijo = new DescuentoFijo();
		DescuentoPorcentaje objDescuentoPorcentaje = new DescuentoPorcentaje(6.3f);	
		DescuentoPorcentajeConTope objDecuentoConTope = new DescuentoPorcentajeConTope(7.1f);
		
		//Carga objeto productos.
		objProductos[0]=new Producto("Manzana", 150.2f, 0.12f);
		objProductos[1]=new Producto("Peras", 102f, 0.1f);
		objProductos[2]=new Producto("Bananas", 110f, 0.15f);		
		objProductos[3]=new Producto("Pasta dental", 239.5f, 0.05f);
		objProductos[4]=new Producto("Cepillo de dientes", 187.0f, 0.03f);		
		objProductos[5]=new Producto("Cerveza Importada Hoegaarden", 900f, 0.5f);
		objProductos[6]=new Producto("Cerveza Importada Erdinger", 850.0f, 0.5f);
		objProductos[7]=new Producto("Cerveza Importada Grolsch", 3200.0f, 1.0f);		
		
		//Productos que lanzan excepciones.
		objProductos[8]=new Producto("Caramelos Mediahora",0.0f,0.003f);
		objProductos[9]=new Producto("Papas",-520.5f,2.0f);
		
		
		//Objetos items carrito
		objItem[0] = new itemCarrito (objProductos[0],10);
		objItem[1] = new itemCarrito (objProductos[1],3);
		objItem[2] = new itemCarrito (objProductos[2],5);
		objItem[3] = new itemCarrito (objProductos[3],4);
		objItem[4] = new itemCarrito (objProductos[4],1);
		objItem[5] = new itemCarrito (objProductos[5],2);
		objItem[6] = new itemCarrito (objProductos[6],4);
		objItem[7] = new itemCarrito (objProductos[7],7);
		
		//Objetos que arrojan excepciones
		objItem[8] = new itemCarrito (objProductos[8],2);
		objItem[9] = new itemCarrito (objProductos[9],2);
		
		
		//Objetos carrito
		carrito1.add(objItem[0]);
		carrito1.add(objItem[1]);
		carrito1.add(objItem[2]);
		
		carrito2.add(objItem[6]);
		carrito2.add(objItem[7]);
		
		carrito3.add("./compra.dat");
		
		
		//Objetos que arrojan excepciones
		carrito4.add(objItem[8]);
		carrito5.add(objItem[9]);
		
		
		
		//Imprime tickets.
		System.out.println("Precio carrito1: "+carrito1.precioTotal());
		System.out.println("Precio carrito2: "+carrito2.precioTotal());
		System.out.println("Precio carrito3: "+carrito3.precioTotal());
		
		double precioEsperado= compra3.getPrecioTotalDescuento();		
		double precioCalculado = 2.0f*1520.3f + 1200.0f + 526.3f*4.0f + 1250.0f*5.0f + 187.5f*3.0f + 950.0f + 410.0f;
		precioCalculado -= precioCalculado*objDescuentoPorcentajeConTope.getDescuento()/100.0f;
		
		assertEquals(precioCalculado, precioEsperado, 0.01f);
		
		/************************************************************************************************************
		 Aca tambien agrego el parametro Delta en 0.01f.
		 Existe un error de redondeo FLOAT -> DOUBLE:
		 CarritoTest.PruebaMetodoDescuentoPorcentajeConTope:134 expected:<13487.500532400418> but was:<13487.5>
		 ************************************************************************************************************/
		
	}
	
	
	/*************************************************************************
	 TEST 4: DescuentoPorcentajeConTope. Prueba limite del tope 20%
	**************************************************************************/	
	@Test
	public void PruebaMetodoDescuentoPorcentajeConTope2() {
		
		DescuentoPorcentajeConTope objDescuentoPorcentajeConTope=new DescuentoPorcentajeConTope(21.3f);
		
		double porcentaje=21.3f;		
		double valorTeorico = objDescuentoPorcentajeConTope.getDescuento();
		
		assertNotEquals(valorTeorico, porcentaje, 0.0f);
	}
}
